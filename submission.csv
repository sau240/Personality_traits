{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91718,"databundleVersionId":12738969,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/surav12/submission-csv?scriptVersionId=250045895\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"**Load Data**","metadata":{}},{"cell_type":"markdown","source":"#  Loading Required Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC \nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.decomposition import PCA\nfrom xgboost import XGBClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:09.668185Z","iopub.execute_input":"2025-07-12T02:33:09.668527Z","iopub.status.idle":"2025-07-12T02:33:09.675404Z","shell.execute_reply.started":"2025-07-12T02:33:09.668504Z","shell.execute_reply":"2025-07-12T02:33:09.674444Z"}},"outputs":[],"execution_count":92},{"cell_type":"markdown","source":"# Loading Dataset","metadata":{}},{"cell_type":"code","source":"df_test = pd.read_csv(\"/kaggle/input/playground-series-s5e7/test.csv\")\ndf_train = pd.read_csv(\"/kaggle/input/playground-series-s5e7/train.csv\")\ndf_submission = pd.read_csv(\"/kaggle/input/playground-series-s5e7/sample_submission.csv\")\nprint(df_train)\nprint(df_test)\nprint(df_submission)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:12.466987Z","iopub.execute_input":"2025-07-12T02:33:12.467411Z","iopub.status.idle":"2025-07-12T02:33:12.516195Z","shell.execute_reply.started":"2025-07-12T02:33:12.46738Z","shell.execute_reply":"2025-07-12T02:33:12.514684Z"}},"outputs":[{"name":"stdout","text":"          id  Time_spent_Alone Stage_fear  Social_event_attendance  \\\n0          0               0.0         No                      6.0   \n1          1               1.0         No                      7.0   \n2          2               6.0        Yes                      1.0   \n3          3               3.0         No                      7.0   \n4          4               1.0         No                      4.0   \n...      ...               ...        ...                      ...   \n18519  18519               3.0         No                      7.0   \n18520  18520               1.0        NaN                      6.0   \n18521  18521               7.0        Yes                      1.0   \n18522  18522               NaN        Yes                      1.0   \n18523  18523               1.0         No                      8.0   \n\n       Going_outside Drained_after_socializing  Friends_circle_size  \\\n0                4.0                        No                 15.0   \n1                3.0                        No                 10.0   \n2                0.0                       NaN                  3.0   \n3                3.0                        No                 11.0   \n4                4.0                        No                 13.0   \n...              ...                       ...                  ...   \n18519            3.0                        No                  9.0   \n18520            7.0                        No                  6.0   \n18521            1.0                       Yes                  1.0   \n18522            0.0                       Yes                  5.0   \n18523            6.0                        No                  4.0   \n\n       Post_frequency Personality  \n0                 5.0   Extrovert  \n1                 8.0   Extrovert  \n2                 0.0   Introvert  \n3                 5.0   Extrovert  \n4                 NaN   Extrovert  \n...               ...         ...  \n18519             7.0   Extrovert  \n18520             5.0   Extrovert  \n18521             NaN   Introvert  \n18522             2.0   Introvert  \n18523             7.0   Extrovert  \n\n[18524 rows x 9 columns]\n         id  Time_spent_Alone Stage_fear  Social_event_attendance  \\\n0     18524               3.0         No                      7.0   \n1     18525               NaN        Yes                      0.0   \n2     18526               3.0         No                      5.0   \n3     18527               3.0         No                      4.0   \n4     18528               9.0        Yes                      1.0   \n...     ...               ...        ...                      ...   \n6170  24694               3.0         No                      5.0   \n6171  24695               8.0        Yes                      2.0   \n6172  24696               2.0         No                      4.0   \n6173  24697               3.0         No                      4.0   \n6174  24698               NaN        Yes                      1.0   \n\n      Going_outside Drained_after_socializing  Friends_circle_size  \\\n0               4.0                        No                  6.0   \n1               0.0                       Yes                  5.0   \n2               6.0                        No                 15.0   \n3               4.0                        No                  5.0   \n4               2.0                       Yes                  1.0   \n...             ...                       ...                  ...   \n6170            5.0                        No                  9.0   \n6171            1.0                       Yes                  0.0   \n6172            3.0                        No                  9.0   \n6173            4.0                        No                 11.0   \n6174            1.0                       Yes                  1.0   \n\n      Post_frequency  \n0                NaN  \n1                1.0  \n2                9.0  \n3                6.0  \n4                1.0  \n...              ...  \n6170             6.0  \n6171             0.0  \n6172             7.0  \n6173             9.0  \n6174             0.0  \n\n[6175 rows x 8 columns]\n         id Personality\n0     18524   Extrovert\n1     18525   Extrovert\n2     18526   Extrovert\n3     18527   Extrovert\n4     18528   Extrovert\n...     ...         ...\n6170  24694   Extrovert\n6171  24695   Extrovert\n6172  24696   Extrovert\n6173  24697   Extrovert\n6174  24698   Extrovert\n\n[6175 rows x 2 columns]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":93},{"cell_type":"markdown","source":"# Data Cleaning(train set)","metadata":{}},{"cell_type":"code","source":"df_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:16.611974Z","iopub.execute_input":"2025-07-12T02:33:16.613035Z","iopub.status.idle":"2025-07-12T02:33:16.627313Z","shell.execute_reply.started":"2025-07-12T02:33:16.613003Z","shell.execute_reply":"2025-07-12T02:33:16.626176Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"   id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n0   0               0.0         No                      6.0            4.0   \n1   1               1.0         No                      7.0            3.0   \n2   2               6.0        Yes                      1.0            0.0   \n3   3               3.0         No                      7.0            3.0   \n4   4               1.0         No                      4.0            4.0   \n\n  Drained_after_socializing  Friends_circle_size  Post_frequency Personality  \n0                        No                 15.0             5.0   Extrovert  \n1                        No                 10.0             8.0   Extrovert  \n2                       NaN                  3.0             0.0   Introvert  \n3                        No                 11.0             5.0   Extrovert  \n4                        No                 13.0             NaN   Extrovert  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n      <th>Personality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>5.0</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>10.0</td>\n      <td>8.0</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>6.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>Introvert</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>11.0</td>\n      <td>5.0</td>\n      <td>Extrovert</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>13.0</td>\n      <td>NaN</td>\n      <td>Extrovert</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":94},{"cell_type":"code","source":"df_test.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:19.202217Z","iopub.execute_input":"2025-07-12T02:33:19.203651Z","iopub.status.idle":"2025-07-12T02:33:19.216414Z","shell.execute_reply.started":"2025-07-12T02:33:19.203608Z","shell.execute_reply":"2025-07-12T02:33:19.215307Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"      id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n0  18524               3.0         No                      7.0            4.0   \n1  18525               NaN        Yes                      0.0            0.0   \n2  18526               3.0         No                      5.0            6.0   \n3  18527               3.0         No                      4.0            4.0   \n4  18528               9.0        Yes                      1.0            2.0   \n\n  Drained_after_socializing  Friends_circle_size  Post_frequency  \n0                        No                  6.0             NaN  \n1                       Yes                  5.0             1.0  \n2                        No                 15.0             9.0  \n3                        No                  5.0             6.0  \n4                       Yes                  1.0             1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Time_spent_Alone</th>\n      <th>Stage_fear</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Drained_after_socializing</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18524</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>6.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18525</td>\n      <td>NaN</td>\n      <td>Yes</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Yes</td>\n      <td>5.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18526</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>5.0</td>\n      <td>6.0</td>\n      <td>No</td>\n      <td>15.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18527</td>\n      <td>3.0</td>\n      <td>No</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>No</td>\n      <td>5.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>18528</td>\n      <td>9.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>Yes</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":95},{"cell_type":"code","source":"df_train.info()\ndf_test.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:22.141903Z","iopub.execute_input":"2025-07-12T02:33:22.142274Z","iopub.status.idle":"2025-07-12T02:33:22.161602Z","shell.execute_reply.started":"2025-07-12T02:33:22.14225Z","shell.execute_reply":"2025-07-12T02:33:22.160557Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18524 entries, 0 to 18523\nData columns (total 9 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   id                         18524 non-null  int64  \n 1   Time_spent_Alone           17334 non-null  float64\n 2   Stage_fear                 16631 non-null  object \n 3   Social_event_attendance    17344 non-null  float64\n 4   Going_outside              17058 non-null  float64\n 5   Drained_after_socializing  17375 non-null  object \n 6   Friends_circle_size        17470 non-null  float64\n 7   Post_frequency             17260 non-null  float64\n 8   Personality                18524 non-null  object \ndtypes: float64(5), int64(1), object(3)\nmemory usage: 1.3+ MB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6175 entries, 0 to 6174\nData columns (total 8 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   id                         6175 non-null   int64  \n 1   Time_spent_Alone           5750 non-null   float64\n 2   Stage_fear                 5577 non-null   object \n 3   Social_event_attendance    5778 non-null   float64\n 4   Going_outside              5709 non-null   float64\n 5   Drained_after_socializing  5743 non-null   object \n 6   Friends_circle_size        5825 non-null   float64\n 7   Post_frequency             5767 non-null   float64\ndtypes: float64(5), int64(1), object(2)\nmemory usage: 386.1+ KB\n","output_type":"stream"}],"execution_count":96},{"cell_type":"code","source":"df_train.describe()\ndf_test.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:25.453805Z","iopub.execute_input":"2025-07-12T02:33:25.454126Z","iopub.status.idle":"2025-07-12T02:33:25.491575Z","shell.execute_reply.started":"2025-07-12T02:33:25.454078Z","shell.execute_reply":"2025-07-12T02:33:25.490464Z"}},"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"                 id  Time_spent_Alone  Social_event_attendance  Going_outside  \\\ncount   6175.000000       5750.000000              5778.000000    5709.000000   \nmean   21611.000000          3.116870                 5.287989       4.037835   \nstd     1782.713288          2.985658                 2.758052       2.045207   \nmin    18524.000000          0.000000                 0.000000       0.000000   \n25%    20067.500000          1.000000                 3.000000       3.000000   \n50%    21611.000000          2.000000                 5.000000       4.000000   \n75%    23154.500000          4.000000                 8.000000       6.000000   \nmax    24698.000000         11.000000                10.000000       7.000000   \n\n       Friends_circle_size  Post_frequency  \ncount          5825.000000     5767.000000  \nmean              8.008412        5.028958  \nstd               4.192701        2.867285  \nmin               0.000000        0.000000  \n25%               5.000000        3.000000  \n50%               8.000000        5.000000  \n75%              12.000000        7.000000  \nmax              15.000000       10.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Time_spent_Alone</th>\n      <th>Social_event_attendance</th>\n      <th>Going_outside</th>\n      <th>Friends_circle_size</th>\n      <th>Post_frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>6175.000000</td>\n      <td>5750.000000</td>\n      <td>5778.000000</td>\n      <td>5709.000000</td>\n      <td>5825.000000</td>\n      <td>5767.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>21611.000000</td>\n      <td>3.116870</td>\n      <td>5.287989</td>\n      <td>4.037835</td>\n      <td>8.008412</td>\n      <td>5.028958</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1782.713288</td>\n      <td>2.985658</td>\n      <td>2.758052</td>\n      <td>2.045207</td>\n      <td>4.192701</td>\n      <td>2.867285</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>18524.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>20067.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>5.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>21611.000000</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>23154.500000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>12.000000</td>\n      <td>7.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>24698.000000</td>\n      <td>11.000000</td>\n      <td>10.000000</td>\n      <td>7.000000</td>\n      <td>15.000000</td>\n      <td>10.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":97},{"cell_type":"code","source":"print(df_test.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:28.569443Z","iopub.execute_input":"2025-07-12T02:33:28.569802Z","iopub.status.idle":"2025-07-12T02:33:28.576193Z","shell.execute_reply.started":"2025-07-12T02:33:28.569777Z","shell.execute_reply":"2025-07-12T02:33:28.574917Z"}},"outputs":[{"name":"stdout","text":"id                             int64\nTime_spent_Alone             float64\nStage_fear                    object\nSocial_event_attendance      float64\nGoing_outside                float64\nDrained_after_socializing     object\nFriends_circle_size          float64\nPost_frequency               float64\ndtype: object\n","output_type":"stream"}],"execution_count":98},{"cell_type":"code","source":"print(df_train.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:31.325239Z","iopub.execute_input":"2025-07-12T02:33:31.325562Z","iopub.status.idle":"2025-07-12T02:33:31.33128Z","shell.execute_reply.started":"2025-07-12T02:33:31.325538Z","shell.execute_reply":"2025-07-12T02:33:31.330333Z"}},"outputs":[{"name":"stdout","text":"id                             int64\nTime_spent_Alone             float64\nStage_fear                    object\nSocial_event_attendance      float64\nGoing_outside                float64\nDrained_after_socializing     object\nFriends_circle_size          float64\nPost_frequency               float64\nPersonality                   object\ndtype: object\n","output_type":"stream"}],"execution_count":99},{"cell_type":"markdown","source":"## Step 1: Handling Missing Values\n*Before training our model, we check for missing values and fill them with the median to avoid skewing the dataset.*","metadata":{}},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:35.091751Z","iopub.execute_input":"2025-07-12T02:33:35.092039Z","iopub.status.idle":"2025-07-12T02:33:35.103556Z","shell.execute_reply.started":"2025-07-12T02:33:35.092018Z","shell.execute_reply":"2025-07-12T02:33:35.102626Z"}},"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"id                              0\nTime_spent_Alone             1190\nStage_fear                   1893\nSocial_event_attendance      1180\nGoing_outside                1466\nDrained_after_socializing    1149\nFriends_circle_size          1054\nPost_frequency               1264\nPersonality                     0\ndtype: int64"},"metadata":{}}],"execution_count":100},{"cell_type":"code","source":"numerical_cols = [\n    \"Time_spent_Alone\", \"Social_event_attendance\",\n    \"Going_outside\", \"Friends_circle_size\", \"Post_frequency\"\n]\n\nfor col in numerical_cols:\n    df_train[col] = df_train[col].fillna(df_train[col].median())\n    \nfor col in ['Stage_fear', 'Drained_after_socializing']:\n    df_train[col] = df_train[col].fillna(df_train[col].mode()[0])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:38.670757Z","iopub.execute_input":"2025-07-12T02:33:38.671061Z","iopub.status.idle":"2025-07-12T02:33:38.687641Z","shell.execute_reply.started":"2025-07-12T02:33:38.671038Z","shell.execute_reply":"2025-07-12T02:33:38.686438Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"df_train.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:43.973336Z","iopub.execute_input":"2025-07-12T02:33:43.974077Z","iopub.status.idle":"2025-07-12T02:33:43.98596Z","shell.execute_reply.started":"2025-07-12T02:33:43.974053Z","shell.execute_reply":"2025-07-12T02:33:43.984672Z"}},"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"id                           0\nTime_spent_Alone             0\nStage_fear                   0\nSocial_event_attendance      0\nGoing_outside                0\nDrained_after_socializing    0\nFriends_circle_size          0\nPost_frequency               0\nPersonality                  0\ndtype: int64"},"metadata":{}}],"execution_count":102},{"cell_type":"code","source":"df_test.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:46.712851Z","iopub.execute_input":"2025-07-12T02:33:46.713929Z","iopub.status.idle":"2025-07-12T02:33:46.722254Z","shell.execute_reply.started":"2025-07-12T02:33:46.713895Z","shell.execute_reply":"2025-07-12T02:33:46.721261Z"}},"outputs":[{"execution_count":103,"output_type":"execute_result","data":{"text/plain":"id                             0\nTime_spent_Alone             425\nStage_fear                   598\nSocial_event_attendance      397\nGoing_outside                466\nDrained_after_socializing    432\nFriends_circle_size          350\nPost_frequency               408\ndtype: int64"},"metadata":{}}],"execution_count":103},{"cell_type":"code","source":"numerical_cols = [\n    \"Time_spent_Alone\", \"Social_event_attendance\",\n    \"Going_outside\", \"Friends_circle_size\", \"Post_frequency\"\n]\n\nfor col in numerical_cols:\n    df_test[col] = df_test[col].fillna(df_test[col].median())\n    \nfor col in ['Stage_fear', 'Drained_after_socializing']:\n    df_test[col] = df_test[col].fillna(df_test[col].mode()[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:49.085711Z","iopub.execute_input":"2025-07-12T02:33:49.086177Z","iopub.status.idle":"2025-07-12T02:33:49.099061Z","shell.execute_reply.started":"2025-07-12T02:33:49.08613Z","shell.execute_reply":"2025-07-12T02:33:49.097973Z"}},"outputs":[],"execution_count":104},{"cell_type":"code","source":"df_test.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:33:51.46332Z","iopub.execute_input":"2025-07-12T02:33:51.463625Z","iopub.status.idle":"2025-07-12T02:33:51.472546Z","shell.execute_reply.started":"2025-07-12T02:33:51.463604Z","shell.execute_reply":"2025-07-12T02:33:51.471548Z"}},"outputs":[{"execution_count":105,"output_type":"execute_result","data":{"text/plain":"id                           0\nTime_spent_Alone             0\nStage_fear                   0\nSocial_event_attendance      0\nGoing_outside                0\nDrained_after_socializing    0\nFriends_circle_size          0\nPost_frequency               0\ndtype: int64"},"metadata":{}}],"execution_count":105},{"cell_type":"markdown","source":"# Label Encoding & Feature Selection","metadata":{}},{"cell_type":"code","source":"le_personality = LabelEncoder()\ndf_train[\"Personality\"] = le_personality.fit_transform(df_train[\"Personality\"])\nencoders = {}\ncols_to_encode = [\"Stage_fear\", \"Drained_after_socializing\"]\n\nfor col in cols_to_encode:\n    le = LabelEncoder()\n    df_train[col] = le.fit_transform(df_train[col])\n    encoders[col] = le \n\nx = df_train[cols_to_encode]\ny = df_train[\"Personality\"]\nX_train, X_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)\n\ndf_test_encoded = df_test[cols_to_encode].copy()\nfor col in cols_to_encode:\n    df_test_encoded[col] = encoders[col].transform(df_test_encoded[col])  \n\n\nprint(df_train.head())    \nprint(df_test.head())     \nprint(df_submission.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:29.902977Z","iopub.execute_input":"2025-07-12T02:43:29.904051Z","iopub.status.idle":"2025-07-12T02:43:29.927139Z","shell.execute_reply.started":"2025-07-12T02:43:29.904001Z","shell.execute_reply":"2025-07-12T02:43:29.925943Z"}},"outputs":[{"name":"stdout","text":"   id  Time_spent_Alone  Stage_fear  Social_event_attendance  Going_outside  \\\n0   0               0.0           0                      6.0            4.0   \n1   1               1.0           0                      7.0            3.0   \n2   2               6.0           1                      1.0            0.0   \n3   3               3.0           0                      7.0            3.0   \n4   4               1.0           0                      4.0            4.0   \n\n   Drained_after_socializing  Friends_circle_size  Post_frequency  Personality  \n0                          0                 15.0             5.0            0  \n1                          0                 10.0             8.0            0  \n2                          0                  3.0             0.0            1  \n3                          0                 11.0             5.0            0  \n4                          0                 13.0             5.0            0  \n      id  Time_spent_Alone  Stage_fear  Social_event_attendance  \\\n0  18524               3.0           0                      7.0   \n1  18525               2.0           1                      0.0   \n2  18526               3.0           0                      5.0   \n3  18527               3.0           0                      4.0   \n4  18528               9.0           1                      1.0   \n\n   Going_outside  Drained_after_socializing  Friends_circle_size  \\\n0            4.0                          0                  6.0   \n1            0.0                          1                  5.0   \n2            6.0                          0                 15.0   \n3            4.0                          0                  5.0   \n4            2.0                          1                  1.0   \n\n   Post_frequency  \n0             5.0  \n1             1.0  \n2             9.0  \n3             6.0  \n4             1.0  \n      id Personality\n0  18524   Extrovert\n1  18525   Extrovert\n2  18526   Extrovert\n3  18527   Extrovert\n4  18528   Extrovert\n","output_type":"stream"}],"execution_count":120},{"cell_type":"markdown","source":"# Model Comparison (Base Models)","metadata":{}},{"cell_type":"code","source":"models = {\n    \"RandomForest\": RandomForestClassifier(n_estimators=100, random_state=42),\n    \"SVM\": SVC(),\n    \"KNearestNeighbor\": KNeighborsClassifier(),\n    \"LogisticRegression\": LogisticRegression(max_iter=100)\n}\n\nresults = {}\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    preds = model.predict(X_val)\n    acc = accuracy_score(y_val, preds)\n    results[name] = acc\nfor name, acc in results.items():\n    print(f\"{name} Accuracy: {acc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:34.064865Z","iopub.execute_input":"2025-07-12T02:43:34.065237Z","iopub.status.idle":"2025-07-12T02:43:35.551292Z","shell.execute_reply.started":"2025-07-12T02:43:34.06521Z","shell.execute_reply":"2025-07-12T02:43:35.547252Z"}},"outputs":[{"name":"stdout","text":"RandomForest Accuracy: 0.9668\nSVM Accuracy: 0.9668\nKNearestNeighbor Accuracy: 0.9668\nLogisticRegression Accuracy: 0.9668\n","output_type":"stream"}],"execution_count":121},{"cell_type":"markdown","source":"# Model Comparison (Boosted Models)","metadata":{}},{"cell_type":"code","source":"models = {\n    \"CatBoostClassifier\": CatBoostClassifier(n_estimators=100, random_state=42, verbose=0),\n    \"LightGBMClassifier\": LGBMClassifier(n_estimators=100, random_state=42),\n    \"XGBClassifier\": XGBClassifier(n_estimators=100, random_state=42)\n}\n\nresults = {}\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    preds = model.predict(X_val)\n    acc = accuracy_score(y_val, preds)\n    results[name] = acc\nfor name, acc in results.items():\n    print(f\"{name} Accuracy: {acc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:37.05524Z","iopub.execute_input":"2025-07-12T02:43:37.055587Z","iopub.status.idle":"2025-07-12T02:43:37.386528Z","shell.execute_reply.started":"2025-07-12T02:43:37.055564Z","shell.execute_reply":"2025-07-12T02:43:37.38439Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\nCatBoostClassifier Accuracy: 0.9668\nLightGBMClassifier Accuracy: 0.9668\nXGBClassifier Accuracy: 0.9668\n","output_type":"stream"}],"execution_count":122},{"cell_type":"markdown","source":"# Voting Ensemble (Soft Voting)","metadata":{}},{"cell_type":"code","source":"cat = CatBoostClassifier(verbose=0, random_state=42)\nxgb = XGBClassifier(verbosity=0, random_state=42)\nlgb = LGBMClassifier(verbose=0, random_state=42)\n\nensemble = VotingClassifier(\n    estimators=[\n        ('cat', cat),\n        ('xgb', xgb),\n        ('lgb', lgb)\n    ],\n    voting='soft'\n)\n\nensemble.fit(x, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:42.177129Z","iopub.execute_input":"2025-07-12T02:43:42.178373Z","iopub.status.idle":"2025-07-12T02:43:45.814754Z","shell.execute_reply.started":"2025-07-12T02:43:42.178331Z","shell.execute_reply":"2025-07-12T02:43:45.813879Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","output_type":"stream"},{"execution_count":123,"output_type":"execute_result","data":{"text/plain":"VotingClassifier(estimators=[('cat',\n                              <catboost.core.CatBoostClassifier object at 0x7dcc95362710>),\n                             ('xgb',\n                              XGBClassifier(base_score=None, booster=None,\n                                            callbacks=None,\n                                            colsample_bylevel=None,\n                                            colsample_bynode=None,\n                                            colsample_bytree=None, device=None,\n                                            early_stopping_rounds=None,\n                                            enable_categorical=False,\n                                            eval_metric=None,\n                                            feature_types=None, gamma=None,\n                                            grow_policy=N...\n                                            interaction_constraints=None,\n                                            learning_rate=None, max_bin=None,\n                                            max_cat_threshold=None,\n                                            max_cat_to_onehot=None,\n                                            max_delta_step=None, max_depth=None,\n                                            max_leaves=None,\n                                            min_child_weight=None, missing=nan,\n                                            monotone_constraints=None,\n                                            multi_strategy=None,\n                                            n_estimators=None, n_jobs=None,\n                                            num_parallel_tree=None,\n                                            random_state=42, ...)),\n                             ('lgb',\n                              LGBMClassifier(random_state=42, verbose=0))],\n                 voting='soft')","text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingClassifier(estimators=[(&#x27;cat&#x27;,\n                              &lt;catboost.core.CatBoostClassifier object at 0x7dcc95362710&gt;),\n                             (&#x27;xgb&#x27;,\n                              XGBClassifier(base_score=None, booster=None,\n                                            callbacks=None,\n                                            colsample_bylevel=None,\n                                            colsample_bynode=None,\n                                            colsample_bytree=None, device=None,\n                                            early_stopping_rounds=None,\n                                            enable_categorical=False,\n                                            eval_metric=None,\n                                            feature_types=None, gamma=None,\n                                            grow_policy=N...\n                                            interaction_constraints=None,\n                                            learning_rate=None, max_bin=None,\n                                            max_cat_threshold=None,\n                                            max_cat_to_onehot=None,\n                                            max_delta_step=None, max_depth=None,\n                                            max_leaves=None,\n                                            min_child_weight=None, missing=nan,\n                                            monotone_constraints=None,\n                                            multi_strategy=None,\n                                            n_estimators=None, n_jobs=None,\n                                            num_parallel_tree=None,\n                                            random_state=42, ...)),\n                             (&#x27;lgb&#x27;,\n                              LGBMClassifier(random_state=42, verbose=0))],\n                 voting=&#x27;soft&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingClassifier</label><div class=\"sk-toggleable__content\"><pre>VotingClassifier(estimators=[(&#x27;cat&#x27;,\n                              &lt;catboost.core.CatBoostClassifier object at 0x7dcc95362710&gt;),\n                             (&#x27;xgb&#x27;,\n                              XGBClassifier(base_score=None, booster=None,\n                                            callbacks=None,\n                                            colsample_bylevel=None,\n                                            colsample_bynode=None,\n                                            colsample_bytree=None, device=None,\n                                            early_stopping_rounds=None,\n                                            enable_categorical=False,\n                                            eval_metric=None,\n                                            feature_types=None, gamma=None,\n                                            grow_policy=N...\n                                            interaction_constraints=None,\n                                            learning_rate=None, max_bin=None,\n                                            max_cat_threshold=None,\n                                            max_cat_to_onehot=None,\n                                            max_delta_step=None, max_depth=None,\n                                            max_leaves=None,\n                                            min_child_weight=None, missing=nan,\n                                            monotone_constraints=None,\n                                            multi_strategy=None,\n                                            n_estimators=None, n_jobs=None,\n                                            num_parallel_tree=None,\n                                            random_state=42, ...)),\n                             (&#x27;lgb&#x27;,\n                              LGBMClassifier(random_state=42, verbose=0))],\n                 voting=&#x27;soft&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>cat</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CatBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>&lt;catboost.core.CatBoostClassifier object at 0x7dcc95362710&gt;</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMClassifier</label><div class=\"sk-toggleable__content\"><pre>LGBMClassifier(random_state=42, verbose=0)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":123},{"cell_type":"code","source":"sns.heatmap(x.corr(), annot=True, cmap=\"coolwarm\")\nplt.title(\"Feature Correlation Heatmap\")\nplt.show()\n\nlow_var_cols = [col for col in x.columns if x[col].nunique() <= 1]\nprint(\"Low Variance or Constant Features:\", low_var_cols)\n\nprint(\"Duplicate rows in train:\", x.duplicated().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:51.148205Z","iopub.execute_input":"2025-07-12T02:43:51.148591Z","iopub.status.idle":"2025-07-12T02:43:51.364942Z","shell.execute_reply.started":"2025-07-12T02:43:51.148567Z","shell.execute_reply":"2025-07-12T02:43:51.363872Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Low Variance or Constant Features: []\nDuplicate rows in train: 18520\n","output_type":"stream"}],"execution_count":124},{"cell_type":"markdown","source":"# PCA ","metadata":{}},{"cell_type":"code","source":"pca = PCA(n_components=0.95)\nx_pca = pca.fit_transform(x)\nprint(x_pca)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:43:55.236879Z","iopub.execute_input":"2025-07-12T02:43:55.237245Z","iopub.status.idle":"2025-07-12T02:43:55.247128Z","shell.execute_reply.started":"2025-07-12T02:43:55.237211Z","shell.execute_reply":"2025-07-12T02:43:55.245878Z"}},"outputs":[{"name":"stdout","text":"[[-3.08588920e-01  8.17047181e-04]\n [-3.08588920e-01  8.17047180e-04]\n [ 3.96889417e-01  7.09548530e-01]\n ...\n [ 1.10562090e+00  4.07019276e-03]\n [ 1.10562090e+00  4.07019276e-03]\n [-3.08588920e-01  8.17047180e-04]]\n","output_type":"stream"}],"execution_count":125},{"cell_type":"code","source":"le_stage = LabelEncoder()\nle_drained = LabelEncoder()\n\ndf_test[\"Stage_fear\"] = le_stage.fit_transform(df_test[\"Stage_fear\"])\ndf_test[\"Drained_after_socializing\"] = le_drained.fit_transform(df_test[\"Drained_after_socializing\"])\n\nx_test = df_test[[\"Stage_fear\", \"Drained_after_socializing\"]]\n\npredictions = model.predict(x_test)\n\nsubmission_df = pd.DataFrame({\n    \"id\": df_test[\"id\"],\n    \"target\": predictions\n})\n\nsubmission_df.to_csv(\"submission.csv\", index=False)\nprint(\"🎯 Submission file saved as submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T02:53:40.206425Z","iopub.execute_input":"2025-07-12T02:53:40.206795Z","iopub.status.idle":"2025-07-12T02:53:40.226704Z","shell.execute_reply.started":"2025-07-12T02:53:40.206767Z","shell.execute_reply":"2025-07-12T02:53:40.225837Z"}},"outputs":[{"name":"stdout","text":"🎯 Submission file saved as submission.csv\n","output_type":"stream"}],"execution_count":128}]}